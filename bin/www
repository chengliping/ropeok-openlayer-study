#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('./app');
var http = require('http');
var url = require('url');
let webConfig = require('../config/websocket-config');
let config = require('../config/config');
const WebSocket = require('ws');
const { exec, spawn } = require('child_process');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.api_local_port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
for(let webConfigItem of webConfig){
  let ws = new WebSocket.Server({ noServer: true });
  ws.on('connection', function connection(client) {
    let apiString = JSON.stringify(webConfigItem.json);
    client.send(apiString);
    setInterval(()=>{
      client.send(apiString);
    }, 10000);
  });
  webConfigItem.server = ws;
}

server.on('upgrade', function upgrade(request, socket, head) {
  const pathname = url.parse(request.url).pathname;
  let isWs = false;
  for(let webConfigItem of webConfig){
    if (pathname.indexOf(webConfigItem.path) !== -1 ) {
      webConfigItem.server.handleUpgrade(request, socket, head, function done(ws) {
        webConfigItem.server.emit('connection', ws, request);
      });
      isWs = true;
    }
  }
  if(isWs)return;

  socket.destroy();
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
